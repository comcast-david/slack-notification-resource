#!/bin/bash

set -e

cd "${1}"

exec 3>&1
exec 1>&2
set +x
# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > "${payload}" <&0

webhook_url="$(jq -r '.source.url' < "${payload}")"
allow_insecure="$(jq -r '.source.insecure // "false"' < "${payload}")"
raw_ca_certs=$(jq -r '.source.ca_certs // []' < $payload)

text_file="$(jq -r '.params.text_file // ""' < "${payload}")"
text="$(jq '(.params.text // "${TEXT_FILE_CONTENT}")' < "${payload}")"
username="$(jq '(.params.username // null)' < "${payload}")"
icon_url="$(jq '(.params.icon_url // null)' < "${payload}")"
icon_emoji="$(jq '(.params.icon_emoji // null)' < "${payload}")"
channel="$(jq '(.params.channel // null)' < "${payload}")"

debug="$(jq -r '.params.debug // "false"' < "${payload}")"
show_metadata="$(jq -r '.params.metadata // "false"' < "${payload}")"
show_payload="$(jq -r '.params.payload_in_metadata // "false"' < "${payload}")"
silent="$(jq -r '.params.silent // "false"' < "${payload}")"
always_notify="$(jq -r '.params.always_notify // "false"' < "${payload}")"
redact_hook="$(jq -r '.params.redact_hook_url // "true"' < "${payload}")"

# If we have any proxy settings use those
http_proxy="$(jq -r '.source.http_proxy // ""' < "${payload}")"
https_proxy="$(jq -r '.source.https_proxy // ""' < "${payload}")"

# setting http/s proxy environmental variables.
# these are read by curl on execution and used to determine 
# whether a request needs to be routed through a proxy server. 
if [[ "$http_proxy" != "" ]]; then 
  export http_proxy="$http_proxy"
fi
if [[ "$https_proxy" != "" ]]; then
  export https_proxy="$https_proxy"
fi

cert_count="$(echo $raw_ca_certs | jq -r '. | length')"
if [[ ${cert_count} -gt 0 ]]
then
  cert_dir="/usr/local/share/ca-certificates/"
  mkdir -p "$cert_dir"
  for i in $(seq 0 $(expr "$cert_count" - 1));
  do
    echo $raw_ca_certs | jq -r .[$i].cert >> "${cert_dir}/ca-cert-$(echo $raw_ca_certs | jq -r .[$i].domain).crt"
  done
  update-ca-certificates
fi

TEXT_FILE_CONTENT=""
[[ -n "${text_file}" && -f "${text_file}" ]] && TEXT_FILE_CONTENT="$(cat "${text_file}")"

debug_info=""
metadata=""
body=""


if [[ "$allow_insecure" == "true" ]]
then
    CURL_OPTION="${CURL_OPTION} -k"
fi

if [[ "$always_notify" == "true" || -n "$TEXT_FILE_CONTENT" || -z "$text_file" ]]
then
  TEXT_FILE_CONTENT="${TEXT_FILE_CONTENT:-_(no notification provided)_}"

  text="$(eval printf ${text} )"
  [[ -z "${text}" ]] && text="_(missing notification text)_"
  text="$(echo "${text}" | jq -R -s .)"

  [[ "${username}"   != "null" ]] && username="$(eval "printf ${username}" | jq -R -s .)"
  [[ "${icon_url}"   != "null" ]] && icon_url="$(eval "printf ${icon_url}" | jq -R -s .)"
  [[ "${icon_emoji}" != "null" ]] && icon_emoji="$(eval "printf ${icon_emoji}" | jq -R -s .)"
  [[ "${channel}"    != "null" ]] && channel="$(eval "printf ${channel}" | jq -R -s .)"

  body="$(cat <<EOF
{
  "text": ${text},
  "username": ${username},
  "icon_url": ${icon_url},
  "icon_emoji": ${icon_emoji},
  "channel": ${channel}
}
EOF
  )"

  compact_body="$(echo "${body}" | jq -c '.')"

  if [[ "$debug" == "true" ]]
  then
    debug_info="$(cat <<EOF
{
  "webhook_url": "${webhook_url}",
  "body": ${body}
}
EOF
)" 
  elif [[ "$silent" == "true" ]]
  then
    echo "Using silent output"
    curl -s -X POST --data-urlencode "payload=${compact_body}" ${CURL_OPTION} "${webhook_url}"
  elif [[ ${redact_hook} == "true" ]]
  then
    url_path="$(echo ${webhook_url} | sed -e "s/https\{0,1\}:\/\/[^\/]*\(\/[^?&#]*\).*/\1/")"
    curl -v -X POST --data-urlencode "payload=${compact_body}" ${CURL_OPTION} "${webhook_url}" 2>&1 | sed -e "s#${url_path}#***WEBHOOK URL REDACTED***#g"
  else
    curl -v -X POST --data-urlencode "payload=${compact_body}" ${CURL_OPTION} "${webhook_url}" | sed -e "s#${url_path}#***WEBHOOK URL REDACTED***#g"
  fi
else
  text="$(echo "" | jq -R -s .)"
fi

if [[ "$show_metadata" == "true" ]]
then
  redacted_webhook_url=$(echo "${webhook_url}" | sed -e 's#/\([^/\.]\{2\}\)[^/.]\{5,\}\([^/.]\{2\}\)#/\1â€¦\2#g' | jq -R .)
  escaped_text_file="$(echo $text_file | jq -R -s . )"
  if [[ ${redact_hook} == "true" ]]
  then
    escaped_payload="$(cat $payload | jq -rcM ".source.url = \"***REDACTED***\"" | jq -R -s . )"
  else
    escaped_payload="$(cat $payload | jq -rcM ".source.url = \"***REDACTED***\"" | jq -R -s . )"
  fi

  escaped_content="$(echo $TEXT_FILE_CONTENT | jq -R -s . )"
  text_file_exists="No" && [[ -n "$text_file" ]] && [[ -f "$text_file" ]] && text_file_exists=Yes
  metadata="$(cat <<EOF
{
  "metadata": [
    {"name": "url",               "value": ${redacted_webhook_url}},
    {"name": "channel",           "value": ${channel}             },
    {"name": "username",          "value": ${username}            },
    {"name": "text",              "value": ${text}                },
    {"name": "text_file",         "value": $( echo "$text_file"         | jq -R . ) },
    {"name": "text_file_exists",  "value": $( echo "$text_file_exists"  | jq -R . ) },
    {"name": "text_file_content", "value": $( echo "$TEXT_FILE_CONTENT" | jq -R -s . ) }
  ]
}
EOF
  )"
  if [[ "${show_payload}" == "true" ]]
  then
    metadata="$( echo ${metadata} | jq -r ".metadata += [{name: \"payload\", value: $escaped_payload}]")"
  fi

fi

timestamp="$(jq -n "{version:{timestamp:\"$(date +%s)\"}}")"
echo "$timestamp $metadata $debug_info " | jq -s add  >&3
